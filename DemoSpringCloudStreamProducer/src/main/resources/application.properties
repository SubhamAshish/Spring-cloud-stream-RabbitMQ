spring.application.name=RabbitMQ-Producer

server.port=9090

#RabbitMQ configuration
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest


#exchange
spring.cloud.stream.bindings.emailchannel-in.destination=emailexchange
spring.cloud.stream.bindings.emailchannel-out.destination=emailexchange

spring.cloud.stream.bindings.emailchannel-in.contentType=application/json
spring.cloud.stream.bindings.emailchannel-out.contentType=application/json

#to make producer transactional??
spring.cloud.stream.rabbit.bindings.emailchannel-out.producer.transacted=true
spring.cloud.stream.rabbit.bindings.emailchannel-in.consumer.transacted=true

##declaring exchange-type as direct
spring.cloud.stream.rabbit.bindings.emailchannel-out.producer.exchangeType=direct
spring.cloud.stream.rabbit.bindings.emailchannel-in.consumer.exchangeType=direct

#queue
spring.cloud.stream.bindings.emailchannel-in.group=emailproducerqueue

#routing-key
spring.cloud.stream.rabbit.bindings.emailchannel-out.producer.routingKeyExpression='email'
spring.cloud.stream.rabbit.bindings.emailchannel-in.consumer.bindingRoutingKey=email


#==========#DLQ ===========
#instead of publishing the message to DLQ it reque the message when retry is disabled or republishToDlq is false
#spring.cloud.stream.rabbit.bindings.emailchannel-in.consumer.auto-bind-dlq=true
#default value is false
#spring.cloud.stream.rabbit.bindings.emailchannel-in.consumer.republish-to-dlq=false
#spring.cloud.stream.bindings.emailchannel-in.consumer.max-attempts=1
#default value is false
#spring.cloud.stream.rabbit.bindings.emailchannel-in.consumer.requeue-rejected=true

#publish message to DLQ
spring.cloud.stream.rabbit.bindings.emailchannel-in.consumer.auto-bind-dlq=true
spring.cloud.stream.rabbit.bindings.emailchannel-in.consumer.republish-to-dlq=true
#retry=1, === disabled
spring.cloud.stream.bindings.emailchannel-in.consumer.max-attempts=3
#spring.cloud.stream.rabbit.bindings.emailchannel-in.consumer.dlq-ttl=5000
